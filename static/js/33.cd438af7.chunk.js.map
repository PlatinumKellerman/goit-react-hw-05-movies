{"version":3,"file":"static/js/33.cd438af7.chunk.js","mappings":"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","sources":["components/GoBackLink/GoBackLink.styled.js","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx","constants/apiConstants.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const GoBackLinkStyled = styled(Link)`\n  display: block;\n  width: auto;\n  margin: 20px;\n  font-size: 14px;\n  font-weight: 700;\n  text-decoration: none;\n  &:hover,\n  :focus,\n  :active {\n    color: blueviolet;\n  }\n`;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MainInfoWrapper = styled.div`\n  display: flex;\n`;\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 20px;\n`;\n\nexport const Poster = styled.img`\n  width: 250px;\n  height: auto;\n`;\n\nexport const PosterPlug = styled.img`\n  width: 250px;\n  height: auto;\n`;\n\nexport const UserScoreText = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport const Title = styled.h3`\n  font-size: 26px;\n  font-weight: 700;\n`;\n\nexport const TitleYear = styled.span`\n  font-size: 26px;\n  font-weight: 700;\n  margin-left: 5px;\n`;\n\nexport const AddInfoWrapper = styled.div`\n  margin-top: 30px;\n  margin-bottom: 30px;\n  border-bottom: 1px solid black;\n  border-top: 1px solid black;\n`;\n\nexport const AddInfoList = styled.ul`\n  margin-bottom: 20px;\n`;\n\nexport const AddInfoItem = styled.li`\n  text-decoration: none;\n  margin-bottom: 5px;\n`;\n\nexport const AddInfoLink = styled(Link)`\n  text-decoration: none;\n  font-weight: 500;\n  font-size: 18px;\n  color: #551a8b;\n  &:hover {\n    color: blueviolet;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { getMoviesById } from '../../services/api';\nimport { GoBackLinkStyled } from '../../components/GoBackLink/GoBackLink.styled';\nimport poster_plug from '../../img/poster_plug.jpg';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Poster,\n  MainInfoWrapper,\n  InfoWrapper,\n  UserScoreText,\n  Title,\n  TitleYear,\n  AddInfoItem,\n  AddInfoLink,\n  AddInfoWrapper,\n  AddInfoList,\n  PosterPlug,\n} from './MovieDetails.styled';\n\nfunction MovieDetails() {\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const navigate = useNavigate();\n  const releaseDate = new Date(movie.release_date).getFullYear();\n\n  useEffect(() => {\n    const movieInfo = async () => {\n      try {\n        const response = await getMoviesById(movieId);\n        setMovie(response);\n      } catch (error) {\n        if (error) {\n          if (error) {\n            navigate('/*', { replace: true });\n          }\n        }\n      }\n    };\n    movieInfo();\n  }, [movieId, navigate]);\n\n  return (\n    <main>\n      <GoBackLinkStyled to={backLinkHref}>{'<'} Go back</GoBackLinkStyled>\n      <div>\n        <MainInfoWrapper>\n          {movie.poster_path ? (\n            <Poster\n              src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n              alt={movie.title}\n            ></Poster>\n          ) : (\n            <PosterPlug src={poster_plug} alt=\"Poster Plug\"></PosterPlug>\n          )}\n          <InfoWrapper>\n            <Title>\n              {movie.title}\n              <TitleYear>({releaseDate})</TitleYear>\n            </Title>\n            <UserScoreText>\n              User Score: {`${Number(movie.vote_average).toFixed(1) * 10}%`}\n            </UserScoreText>\n            <h3>Overview</h3>\n            <p>{movie.overview}</p>\n\n            <h3>Genres</h3>\n            <p>\n              {movie.genres\n                ? movie.genres.map(genre => genre.name).join(', ')\n                : 'There are no genres!'}\n            </p>\n          </InfoWrapper>\n        </MainInfoWrapper>\n\n        <AddInfoWrapper>\n          <h3>Additional information</h3>\n          <AddInfoList>\n            <AddInfoItem>\n              <AddInfoLink to=\"credits\" state={{ from: location }}>\n                {'>'} Cast\n              </AddInfoLink>\n            </AddInfoItem>\n            <AddInfoItem>\n              <AddInfoLink to=\"reviews\" state={{ from: location }}>\n                {'>'} Reviews\n              </AddInfoLink>\n            </AddInfoItem>\n          </AddInfoList>\n        </AddInfoWrapper>\n      </div>\n      <Outlet />\n    </main>\n  );\n}\n\nexport default MovieDetails;\n","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '644038bd8c4d79d1d14f251b1d12234c';\n","import axios from 'axios';\nimport { BASE_URL, API_KEY } from '../constants/apiConstants';\n\nexport async function getPopularMovies() {\n  const response = await axios.get(`${BASE_URL}/trending/movie/day?`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function getMoviesByName(movieName) {\n  const response = await axios.get(`${BASE_URL}/search/movie?`, {\n    params: {\n      query: movieName,\n      page: 1,\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return response.data.results;\n}\n\nexport async function getMoviesById(id) {\n  const response = await axios.get(`${BASE_URL}/movie/${id}?`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport function getMovieCredits(id) {\n  const response = axios.get(`${BASE_URL}/movie/${id}/credits?`, {\n    params: { api_key: API_KEY },\n  });\n  return response;\n}\n\nexport function getMovieReviews(id) {\n  const response = axios.get(`${BASE_URL}/movie/${id}/reviews?`, {\n    params: { api_key: API_KEY },\n  });\n  return response;\n}\n"],"names":["GoBackLinkStyled","styled","Link","MainInfoWrapper","InfoWrapper","Poster","PosterPlug","UserScoreText","Title","TitleYear","AddInfoWrapper","AddInfoList","AddInfoItem","AddInfoLink","location","useLocation","backLinkHref","state","from","movieId","useParams","useState","movie","setMovie","navigate","useNavigate","releaseDate","Date","release_date","getFullYear","useEffect","movieInfo","getMoviesById","response","replace","to","poster_path","src","alt","title","poster_plug","Number","vote_average","toFixed","overview","genres","map","genre","name","join","BASE_URL","API_KEY","getPopularMovies","axios","params","api_key","data","results","getMoviesByName","movieName","query","page","language","id","getMovieCredits","getMovieReviews"],"sourceRoot":""}